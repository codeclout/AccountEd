name: notifications-build

on:
  push:
    branches:
      - '**'
    paths:
      - 'notifications/**'
  workflow_dispatch:

permissions:
  packages: write
  contents: read
  id-token: write

jobs:
  build:
    name: notifications-build
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EMAIL_PROCESSOR_API_KEY: ${{ secrets.EMAIL_PROCESSOR_API_KEY }}
      EMAIL_PROCESSOR_DOMAIN: ${{ secrets.EMAIL_PROCESSOR_DOMAIN }}
      EMAIL_VERIFIER_API_PATH: ${{ secrets.EMAIL_VERIFIER_API_PATH }}
      ENVIRONMENT: ${{ github.ref_name == 'alpha' && 'dev' || 'prod'}}
      GH_ACTOR: ${{ github.actor }}
      GH_REPOSITORY: 'codeclout/accounted'
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      IMAGE_TAG: ${{ github.sha }}
      PERFORMANCE_SLA: ${{ secrets.PERFORMANCE_SLA }}
      NOTIFICATIONS_PORT: ${{ secrets.NOTIFICATIONS_PORT }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version-file: './notifications/go.mod'
          cache-dependency-path: './notifications/go.sum'
      -
        name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: 'latest'
          working-directory: './members'

          args: --timeout=30m --issues-exit-code=1
          install-mode: "goinstall"
      -
        working-directory: './notifications'
        name: Vulnerabilities Check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
      -
        working-directory: './notifications'
        name: build-image
        run: |
          make build-image
      -
        name: scan-image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: sch00l.io/notifications-${{env.ENVIRONMENT}}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
