// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/services.proto

package protov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AWSConfigurationService_GetAWSRoleConfiguration_FullMethodName = "/proto.v1.AWSConfigurationService/GetAWSRoleConfiguration"
)

// AWSConfigurationServiceClient is the client API for AWSConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AWSConfigurationServiceClient interface {
	GetAWSRoleConfiguration(ctx context.Context, in *AWSConfigRequest, opts ...grpc.CallOption) (*AWSConfigResponse, error)
}

type aWSConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAWSConfigurationServiceClient(cc grpc.ClientConnInterface) AWSConfigurationServiceClient {
	return &aWSConfigurationServiceClient{cc}
}

func (c *aWSConfigurationServiceClient) GetAWSRoleConfiguration(ctx context.Context, in *AWSConfigRequest, opts ...grpc.CallOption) (*AWSConfigResponse, error) {
	out := new(AWSConfigResponse)
	err := c.cc.Invoke(ctx, AWSConfigurationService_GetAWSRoleConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AWSConfigurationServiceServer is the server API for AWSConfigurationService service.
// All implementations should embed UnimplementedAWSConfigurationServiceServer
// for forward compatibility
type AWSConfigurationServiceServer interface {
	GetAWSRoleConfiguration(context.Context, *AWSConfigRequest) (*AWSConfigResponse, error)
}

// UnimplementedAWSConfigurationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAWSConfigurationServiceServer struct {
}

func (UnimplementedAWSConfigurationServiceServer) GetAWSRoleConfiguration(context.Context, *AWSConfigRequest) (*AWSConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAWSRoleConfiguration not implemented")
}

// UnsafeAWSConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AWSConfigurationServiceServer will
// result in compilation errors.
type UnsafeAWSConfigurationServiceServer interface {
	mustEmbedUnimplementedAWSConfigurationServiceServer()
}

func RegisterAWSConfigurationServiceServer(s grpc.ServiceRegistrar, srv AWSConfigurationServiceServer) {
	s.RegisterService(&AWSConfigurationService_ServiceDesc, srv)
}

func _AWSConfigurationService_GetAWSRoleConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AWSConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AWSConfigurationServiceServer).GetAWSRoleConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AWSConfigurationService_GetAWSRoleConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AWSConfigurationServiceServer).GetAWSRoleConfiguration(ctx, req.(*AWSConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AWSConfigurationService_ServiceDesc is the grpc.ServiceDesc for AWSConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AWSConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.AWSConfigurationService",
	HandlerType: (*AWSConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAWSRoleConfiguration",
			Handler:    _AWSConfigurationService_GetAWSRoleConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/services.proto",
}
