// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: dynamo/v1/services.proto

package dynamov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DynamoDBStorageService_StorePreConfirmationRegistrationSession_FullMethodName = "/proto.dynamo.v1.DynamoDBStorageService/StorePreConfirmationRegistrationSession"
	DynamoDBStorageService_StoreConfirmedRegistration_FullMethodName              = "/proto.dynamo.v1.DynamoDBStorageService/StoreConfirmedRegistration"
)

// DynamoDBStorageServiceClient is the client API for DynamoDBStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DynamoDBStorageServiceClient interface {
	StorePreConfirmationRegistrationSession(ctx context.Context, in *PreRegistrationConfirmationRequest, opts ...grpc.CallOption) (*PreRegistrationConfirmationResponse, error)
	StoreConfirmedRegistration(ctx context.Context, in *StoreConfirmedRegistrationRequest, opts ...grpc.CallOption) (*StoreConfirmedRegistrationResponse, error)
}

type dynamoDBStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamoDBStorageServiceClient(cc grpc.ClientConnInterface) DynamoDBStorageServiceClient {
	return &dynamoDBStorageServiceClient{cc}
}

func (c *dynamoDBStorageServiceClient) StorePreConfirmationRegistrationSession(ctx context.Context, in *PreRegistrationConfirmationRequest, opts ...grpc.CallOption) (*PreRegistrationConfirmationResponse, error) {
	out := new(PreRegistrationConfirmationResponse)
	err := c.cc.Invoke(ctx, DynamoDBStorageService_StorePreConfirmationRegistrationSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamoDBStorageServiceClient) StoreConfirmedRegistration(ctx context.Context, in *StoreConfirmedRegistrationRequest, opts ...grpc.CallOption) (*StoreConfirmedRegistrationResponse, error) {
	out := new(StoreConfirmedRegistrationResponse)
	err := c.cc.Invoke(ctx, DynamoDBStorageService_StoreConfirmedRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamoDBStorageServiceServer is the server API for DynamoDBStorageService service.
// All implementations should embed UnimplementedDynamoDBStorageServiceServer
// for forward compatibility
type DynamoDBStorageServiceServer interface {
	StorePreConfirmationRegistrationSession(context.Context, *PreRegistrationConfirmationRequest) (*PreRegistrationConfirmationResponse, error)
	StoreConfirmedRegistration(context.Context, *StoreConfirmedRegistrationRequest) (*StoreConfirmedRegistrationResponse, error)
}

// UnimplementedDynamoDBStorageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDynamoDBStorageServiceServer struct {
}

func (UnimplementedDynamoDBStorageServiceServer) StorePreConfirmationRegistrationSession(context.Context, *PreRegistrationConfirmationRequest) (*PreRegistrationConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorePreConfirmationRegistrationSession not implemented")
}
func (UnimplementedDynamoDBStorageServiceServer) StoreConfirmedRegistration(context.Context, *StoreConfirmedRegistrationRequest) (*StoreConfirmedRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreConfirmedRegistration not implemented")
}

// UnsafeDynamoDBStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamoDBStorageServiceServer will
// result in compilation errors.
type UnsafeDynamoDBStorageServiceServer interface {
	mustEmbedUnimplementedDynamoDBStorageServiceServer()
}

func RegisterDynamoDBStorageServiceServer(s grpc.ServiceRegistrar, srv DynamoDBStorageServiceServer) {
	s.RegisterService(&DynamoDBStorageService_ServiceDesc, srv)
}

func _DynamoDBStorageService_StorePreConfirmationRegistrationSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreRegistrationConfirmationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamoDBStorageServiceServer).StorePreConfirmationRegistrationSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamoDBStorageService_StorePreConfirmationRegistrationSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamoDBStorageServiceServer).StorePreConfirmationRegistrationSession(ctx, req.(*PreRegistrationConfirmationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamoDBStorageService_StoreConfirmedRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreConfirmedRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamoDBStorageServiceServer).StoreConfirmedRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamoDBStorageService_StoreConfirmedRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamoDBStorageServiceServer).StoreConfirmedRegistration(ctx, req.(*StoreConfirmedRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DynamoDBStorageService_ServiceDesc is the grpc.ServiceDesc for DynamoDBStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DynamoDBStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.dynamo.v1.DynamoDBStorageService",
	HandlerType: (*DynamoDBStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StorePreConfirmationRegistrationSession",
			Handler:    _DynamoDBStorageService_StorePreConfirmationRegistrationSession_Handler,
		},
		{
			MethodName: "StoreConfirmedRegistration",
			Handler:    _DynamoDBStorageService_StoreConfirmedRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynamo/v1/services.proto",
}
