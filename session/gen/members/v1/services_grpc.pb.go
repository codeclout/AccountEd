// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: members/v1/services.proto

package membersv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MemberSession_GenerateMemberToken_FullMethodName = "/proto.members.v1.MemberSession/GenerateMemberToken"
	MemberSession_ValidateMemberToken_FullMethodName = "/proto.members.v1.MemberSession/ValidateMemberToken"
)

// MemberSessionClient is the client API for MemberSession service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberSessionClient interface {
	GenerateMemberToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	ValidateMemberToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
}

type memberSessionClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberSessionClient(cc grpc.ClientConnInterface) MemberSessionClient {
	return &memberSessionClient{cc}
}

func (c *memberSessionClient) GenerateMemberToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, MemberSession_GenerateMemberToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberSessionClient) ValidateMemberToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, MemberSession_ValidateMemberToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberSessionServer is the server API for MemberSession service.
// All implementations should embed UnimplementedMemberSessionServer
// for forward compatibility
type MemberSessionServer interface {
	GenerateMemberToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	ValidateMemberToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
}

// UnimplementedMemberSessionServer should be embedded to have forward compatible implementations.
type UnimplementedMemberSessionServer struct {
}

func (UnimplementedMemberSessionServer) GenerateMemberToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMemberToken not implemented")
}
func (UnimplementedMemberSessionServer) ValidateMemberToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateMemberToken not implemented")
}

// UnsafeMemberSessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberSessionServer will
// result in compilation errors.
type UnsafeMemberSessionServer interface {
	mustEmbedUnimplementedMemberSessionServer()
}

func RegisterMemberSessionServer(s grpc.ServiceRegistrar, srv MemberSessionServer) {
	s.RegisterService(&MemberSession_ServiceDesc, srv)
}

func _MemberSession_GenerateMemberToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberSessionServer).GenerateMemberToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberSession_GenerateMemberToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberSessionServer).GenerateMemberToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberSession_ValidateMemberToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberSessionServer).ValidateMemberToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberSession_ValidateMemberToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberSessionServer).ValidateMemberToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberSession_ServiceDesc is the grpc.ServiceDesc for MemberSession service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberSession_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.members.v1.MemberSession",
	HandlerType: (*MemberSessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateMemberToken",
			Handler:    _MemberSession_GenerateMemberToken_Handler,
		},
		{
			MethodName: "ValidateMemberToken",
			Handler:    _MemberSession_ValidateMemberToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "members/v1/services.proto",
}
